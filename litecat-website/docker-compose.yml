version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: litecat-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/litecat
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - litecat-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: litecat-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=litecat
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - litecat-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: litecat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --save 60 1
      --loglevel warning
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - litecat-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: litecat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./client:/usr/share/nginx/html
    depends_on:
      - app
    networks:
      - litecat-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: litecat-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha-dark
    depends_on:
      - postgres
    networks:
      - litecat-network

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: litecat-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - litecat-network

  # Development environment with hot reload
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: litecat-dev
    ports:
      - "3001:3000"
      - "9229:9229"  # Node.js debugger
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/litecat_dev
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.development
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - litecat-network
    profiles:
      - development

  # Testing environment
  test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: litecat-test
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/litecat_test
      - REDIS_URL=redis://redis-test:6379
    command: npm test
    depends_on:
      - postgres-test
      - redis-test
    networks:
      - litecat-network
    profiles:
      - testing

  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: litecat-postgres-test
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=litecat_test
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - litecat-network
    profiles:
      - testing

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: litecat-redis-test
    command: redis-server --save ""
    networks:
      - litecat-network
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  litecat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16